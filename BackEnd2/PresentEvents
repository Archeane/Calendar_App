import java.util.Calendar;
import java.util.List;

public class PresentEvents {
	
	private boolean[][] presentEvents;		//False indicates free, true indicates not free
	
	private Calendar firstEventTime;
	private int firstEventYear;						//Indicates the first date that presentEvents starts 
	private int firstEventDay;
	private int firstEventIndex;							//Stores the index in futureEvents that corresponds to firstEventTime

	private int daysOfAvilability;					//How many days are in presentEvents;
	private int timeSlotLength;						//how many minutes are in each time slot
	
	public PresentEvents(Calendar firstEventTime, int daysOfAvilability, int timeSlotLength) throws IllegalArgumentException{
		int initStartYear = EventsProcessor.initStartYear;				//The year that the calendar was first initialized in. Corresponds to the startYear in FutureEvents
		int initStartDay = EventsProcessor.initStartDay;	     		//The day of the year that the calendar was first initialized in.
		
		firstEventYear = firstEventTime.YEAR;
		firstEventDay = firstEventTime.DAY_OF_YEAR;
		
		firstEventIndex = (firstEventYear-initStartYear)*365 + (firstEventDay - initStartDay);
		
		this.daysOfAvilability = daysOfAvilability;
		if(timeSlotLength % 5 == 0){
			this.timeSlotLength = timeSlotLength;
		}else{
			throw new IllegalArgumentException("The timeSlotLength must be a number divisble by 5");
		}
		int numOfTimeSlots = 24*60/timeSlotLength;
		
		presentEvents = new boolean[daysOfAvilability][numOfTimeSlots];
	}

	public void addEvent(BasicEvent e) throws IllegalArgumentException{
		if(e == null || e.getStartTime() == null || e.getEndTime() == null){
			throw new IllegalArgumentException("The param event has null properties");
		}
		Calendar eStartTime = e.getStartTime();
		int eYear = eStartTime.YEAR;
		int eDay = eStartTime.DAY_OF_YEAR;
		int index = 0;
		if(eYear == firstEventYear){
			index = eDay;
		}else if(eYear > firstEventYear){
			index = (365-firstEventDay)+eDay;
		}
		
		if(index < 0 || index >= presentEvents.length){
			throw new IllegalArgumentException("The event does not belong in present events");
		}
		
		int eStartHour = eStartTime.HOUR_OF_DAY;
		int eStartMin = eStartTime.MINUTE;
		int eStartIndex = eStartHour * (60/timeSlotLength) + (int)(eStartMin/timeSlotLength);
		
		Calendar eEndTime = e.getEndTime();
		int eEndHour = eEndTime.HOUR_OF_DAY;
		int eEndMin = eEndTime.MINUTE;
		int eEndIndex = eEndHour * (60/timeSlotLength) + (int)((eEndMin+timeSlotLength-1)/timeSlotLength);
		
		for(int i = eStartIndex; i <= eEndIndex; i++){
			presentEvents[index][i] = true;
		}
		
	}
	
	public void refreshCalendar(Calendar firstEventTime){
		int initStartYear = EventsProcessor.initStartYear;				//The year that the calendar was first initialized in. Corresponds to the startYear in FutureEvents
		int initStartDay = EventsProcessor.initStartDay;	     		//The day of the year that the calendar was first initialized in.
		
		firstEventYear = firstEventTime.YEAR;
		firstEventDay = firstEventTime.DAY_OF_YEAR;
		
		firstEventIndex = (firstEventYear-initStartYear)*365 + (firstEventDay - initStartDay);
		for(int i = 0; i < presentEvents.length; i++){
			for(int j = 0; j < presentEvents[i].length; j++){
				presentEvents[i][j] = false;
			}
		}
		for(int i = firstEventIndex; i < firstEventIndex + presentEvents.length; i++){
			List<BasicEvent> events = EventsProcessor.futureEvents.getIndex(i);
			if(events != null){
				for(int j = 0; j < events.size(); j++){
					addEvent(events.get(j));
				}
			}
		}
	}
	
	
	public String toString(){
		String str = "";
		for(int i = 0; i < presentEvents.length; i++){
			for(int j = 0; j < presentEvents[i].length; j++){
				if(presentEvents[i][j] == true){
					str += " T ";
				}else{
					str += " F ";
				}
			}
			str += "\n";
		}
		return str;
	}
	
	
	
	
	
	
	
}
