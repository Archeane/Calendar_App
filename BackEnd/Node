import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class Node {
	
	private List<BasicEvent> data;
	private Node next;
	private Calendar firstEventDate;			//stores the time corresponding to the earliest event that can be stored in the node
	
	public Node(){
		data = null;
		next = null;
	}
	
	public Node(Calendar firstEventDate){
		next = null;
		Date x = firstEventDate.getTime();
		this.firstEventDate = firstEventDate;	
		data = new ArrayList<BasicEvent>();
	}
	
	/**
	 * Test cases: 
	 * 1. next node has a node		  PASS
	 * 2. next node is null           PASS
	 * @return
	 */
	public Node getNext() throws NullPointerException{
		if(next == null){
			throw new NullPointerException("The next node is null");
		}
		return next;
	}
	
	/**
	 * Adds to the id of the event the position of the event within this node
	 * @param event
	 * @throws IllegalArgumentException
	 * 
	 * test cases:
	 * 1. Event added in random order 
	 * 		data contains events in sorted order		PASS
	 * 2. Event added not in the range of this node
	 * 		throw illegalArgumentException				PASS
	 * 	
	 */
	public void addEvent(BasicEvent event) throws IllegalArgumentException{
		if(isThisNode(event)){
			if(data.size() > 0){
				Utility utility = new Utility();
				//insert element when there's only 1 element in list
				if(data.size() == 1){
					if(utility.compare(10, data.get(data.size()-1).getStartTime(), event.getStartTime()) < 0){
						data.add(data.size(), event);
						return;
					}else{
						data.add(0, event);
						return;
					}
				}
				//if param event belongs to the tail
				if(utility.compare(10, data.get(data.size()-1).getStartTime(), event.getStartTime()) < 0){
					data.add(data.size(), event);
					return;
				}
				//Binary search for the position to insert element
				int index = binaryInsert(event.getStartTime());
				data.add(index, event);
				return;
			}else{
				data.add(event);
				return;
			}
		}else{
			throw new IllegalArgumentException("The param event does not belong to this node " + toString());
		}
	}
	
	/**
	 * Finds the position to insert time in data array in binary time by sorting events based on starting time
	 * @param time
	 * @return
	 */
	public int binaryInsert(Calendar time){
		if(data.size() == 0){
			return 0;
		}
		int low = 0;
		int high = data.size()-1;
		int mid = 0;
		while(true){
			mid = (low+high)/2;
			int compare = data.get(mid).getStartTime().compareTo(time);
			if(compare == 0){		//time is equal to startTime in data.get(mid)
				return mid;
			}else if(compare < 0){	//time is in the upperBound of startTime in data.get(mid)
				low = mid+1;
				if(low > high){
					return mid+1;
				}
			}else{					//time is in lower half
				high = mid-1;
				if(low > high){
					return mid;
				}
			}
		}
	}
	
	/**
	 * Gets and deletes the event corresponding to id in the node
	 * @param id
	 * @return
	 * @throws IllegalArgumentException
	 * 		Indicates the given id does not correspond to an event in eventsDatabase or			PASS
	 * 		Indicates event does not belong to this node based on isTHisNode()					PASS
	 * @throws EventNotFoundException
	 * 		Indicates event does not belong to this node based on binarySearch()
	 * @throws NullPointerException
	 * 		Indicates data is empty
	 */
	public BasicEvent deleteEvent(int id) throws IllegalArgumentException, EventNotFoundException, NullPointerException{
		Integer iId = new Integer(id);
		BasicEvent e = EventProcessor.eventsDataBase.get(iId);
		if(e == null){
			throw new IllegalArgumentException("The given id does not correspond to an event in eventsDataBase");
		}
		if(data == null || data.size() == 0){
			throw new NullPointerException("The events list in this node is empty");
		}
		
		if(isThisNode(e)){
			Calendar eStartTime = e.getStartTime();
			int index = binarySearch(0, data.size()-1, eStartTime);
			if(index > -1){
				return data.remove(index);
			}else{
				throw new EventNotFoundException("Event is not found in this node");
			}
		}else{
			throw new IllegalArgumentException("Event does not belong to this node");
		}
	}
	
	/**
	 * Gets the event corresponding to id in the node 
	 * @param id
	 * @return
	 * @throws IllegalArgumentException			
	 * 		Indicates the given id does not correspond to an event in eventsDatabase or			PASS
	 * 		Indicates event does not belong to this node based on isTHisNode()					PASS
	 * @throws EventNotFoundException
	 * 		Indicates event does not belong to this node based on binarySearch()			  
	 * @throws NullPointerException
	 *		Indicates this node has an empty data											
	 */
	public BasicEvent getEvent(int id) throws IllegalArgumentException, EventNotFoundException, NullPointerException{
		Integer iId = new Integer(id);
		BasicEvent e = EventProcessor.eventsDataBase.get(iId);
		if(e == null){
			throw new IllegalArgumentException("The given id does not correspond to an event in eventsDataBase");
		}
		if(data == null || data.size() == 0){
			throw new NullPointerException("The events list in this node is empty");
		}
		
		if(isThisNode(e)){
			Calendar eStartTime = e.getStartTime();
			int index = binarySearch(0, data.size()-1, eStartTime);
			if(index > -1){
				return data.get(index);
			}else{
				throw new EventNotFoundException("Event is not found in this node");
			}
		}else{
			throw new IllegalArgumentException("Event does not belong to this node");
		}
	}
	
	/**
	 * Binary search for the event in data based on start time. 
	 * @param low
	 * @param high
	 * @param target
	 * @return
	 * 		index of the event
	 * Test cases:
	 * 1. event is in the data(including both ends)  PASS
	 * 2. event is not in data						 PASS
	 */
	public int binarySearch(int low, int high, Calendar target){
		if(high >= 0){
			int mid = (low+high)/2;
			Utility utility = new Utility();
			int compare = utility.compare(1, data.get(mid).getStartTime(), target);
			if(compare == 0){
				return mid;
			}else if(compare > 0){
				return binarySearch(low, mid-1, target);
			}else{
				return binarySearch(mid+1, high, target);
			}
		}
		return -1;
	}
	
	/**
	 * Determines whether the event belongs in the node by comparing the events start time with the start and end time of this node
	 * @param e
	 * @return
	 * 		true if param event has a start time that falls in the range of this node
	 * test cases:
	 * 1. param event belongs in this node - true					PASS
	 * 2. param event has start time earlier than node - false		PASS
	 * 3. param event has end time later than node - false			PASS
	 */
	public boolean isThisNode(BasicEvent e){
		Date temp = firstEventDate.getTime();
		long firstEventDateInMillis = firstEventDate.getTime().getTime();
		long weeksInMillis = PresentEvents.thresholdWeekReset * 604800000;
		Date endDate = new Date(firstEventDateInMillis+weeksInMillis);
	
		Calendar end = Calendar.getInstance();
		end.setTime(endDate);
		
		Date x = e.getStartTime().getTime();
		
		Utility utility = new Utility();
		
		return utility.compare(10, e.getStartTime(), firstEventDate) >= 0 && utility.compare(10, e.getStartTime(), end) <= 0;
	}
	
	/**
	 * Compares a node to another node based on their first event startTime
	 * @param n
	 * @return
	 * 		0 if the firstEventDate are equal				PASS
	 * 		1 if this node is greater than param node		PASS
	 * 		-1 if this node is less than param node			PASS
	 * @throws IllegalArgumentException
	 * 		Indicates a node has null data			PASS
	 * 		Indicates a node is null				PASS
	 */
	public int compareTo(Node n) throws IllegalArgumentException{
		if(n == null){
			throw new IllegalArgumentException("The param node is null");
		}
		if(n.getData() == null){
			throw new IllegalArgumentException("The param node has a null data");
		}
		long firstEventDateInMillis = firstEventDate.getTimeInMillis();
		long nFirstEventDateInMillis = n.firstEventDate.getTimeInMillis();
		
		//TODO: set this tolerance to a variable
		long tolerance = 1800000; //30 minutes
		if(firstEventDateInMillis + tolerance < nFirstEventDateInMillis){
			return -1;
		}else if(firstEventDateInMillis + tolerance == nFirstEventDateInMillis){
			return 0;
		}
		return 1;
	}
	
	/**
	 * Test cases:
	 * 1. node is not null		PASS
	 * 2. Node has null data 	PASS
	 */
	public String toString(){
		if(data == null){
			return "The firstEventDate of this node is :"+firstEventDate.getTime()+ "This node does not contain events";
		}
		String str = "The firstEventDate of this node is :"+firstEventDate.getTime()+"This node contains events: ";
		for(BasicEvent e : data){
			str += "\n"+ e.toString();
		}
		return str;
	}
	
	public boolean isNull(){
		return data == null;
	}
	
	public Calendar getFirstEventDate(){
		return firstEventDate;
	}

	public List<BasicEvent> getData(){
		return data;
	}
	
	public void setNext(Node next){
		this.next = next;
	}
	
	public void setData(List<BasicEvent> data){
		this.data = data;
	}
}
